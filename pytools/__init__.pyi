from typing import Any, Callable, Iterable, Optional, Set, TypeVar
from numbers import Number

T = TypeVar("T")

def one(iterable: Iterable[T]) -> T: ...
def is_single_valued(iterable: Iterable[T], equality_pred: Callable[[T, T], bool] = ...) -> bool: ...
all_equal = is_single_valued
def all_roughly_equal(iterable: Iterable[Number], threshold: Number) -> bool: ...
def single_valued(iterable: Iterable[T], equality_pred: Callable[[T, T], bool] = ...) -> T: ...

def memoize(*args: T, **kwargs: Any) -> T: ...
def memoize_method(method: T) -> T: ...

class UniqueNameGenerator:
    def __init__(self, existing_names: Optional[Set[str]] = ..., forced_prefix: str = ...) -> None: ...
    def __call__(self, based_on: str = ...) -> str: ...
    def is_name_conflicting(self, name: str) -> bool: ...
    def add_name(self, name: str) -> bool: ...
    def add_names(self, name: Iterable[str]) -> bool: ...
